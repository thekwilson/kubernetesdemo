#!/bin/bash
# SAMPLE CODE
# This script can deploy an internal load balancer with a private IP by using the Kubernetes Service
# construct with some AKS specific annotations
# Based on this documentation: https://docs.microsoft.com/en-us/azure/aks/internal-lb
# NOTE:  This script has to be run by someone with rights in Azure to assign the RBAC role network 
# contributor

#variables (constants) used in the scripts
devnamespacelabel="dev2"

#the name of the VNet where your AKS cluster is deployed (assumes CNI)
aksvnetname="bak8sClusterVNET"
#the resource group name for the kubernetes cluster
aksrgname="bak8sRG"
#the resource group name for the VNet (defaulted to the same as the AKS Cluster)
vnetrgname=$aksrgname
#the AKS cluster name
aksclustername="bak8sCluster"
#The AKS cluster service principal object id {GUID}, the script attempts to dynamically populate this
#You can instead just hard code it here
aksserviceprincipal=""
#The Azure subscription is needed for the role assignment, this is auto populated by the script
subscriptionid=""
#The name of of the out of the box RBAC role to use in assingment
vnetrbacrole="Network Contributor"

# The file name of the YAML manifest which defines your Kubernetes Service targeting an ILB
samplemanifest="samplewebappwithILB.yml"
# The name of the service that was deployed (must match the YAML manifest referenced above)
svcname="internal-web-app-svc"

SECONDS=0

#SCRIPT HEADER
starttime=`date +"%Y-%m-%d %T"`
echo "Process Starting: " $starttime

#BEGIN PART 1 ASSIGN THE AKS SP ID WITH THE RIGHT RBAC PERMISSIONS/ROLE ON THE VNET USED BY AKS
echo "Looking up current active Azure Subscription ID"
subscriptionid=$(az account show --query "id" --output tsv)
echo "Subscription = $subscriptionid"

# YOU CAN COMMENT THIS SECTION OUT IF MANUALLY PROVIDING/HARD CODING THE SP OBJECT ID
echo "Looking up the AAD App ID for the AKS Cluster: $aksclustername in RG: $aksrgname"
appid=$(az aks show --resource-group $aksrgname --name $aksclustername --query "servicePrincipalProfile.clientId" --output tsv )

echo "Looking up the AAD Service Principal Object ID for the App ID $appid"
aksserviceprincipal=$(az ad sp list --filter "appId eq '$appid'" --query [].objectId --output tsv)
echo "SP Object ID = $aksserviceprincipal"

vnetresourceid="/subscriptions/$subscriptionid/resourceGroups/$vnetrgname/providers/Microsoft.Network/virtualNetworks/$aksvnetname"

echo "Setting AKS Cluster SP to have $vnetrbacrole on the VNET"
echo "Resource ID for Scope Assignment = $vnetresourceid"
az role assignment create --assignee-object-id $aksserviceprincipal --role "$vnetrbacrole" --scope $vnetresourceid
#END PART 1

#BEGIN PART 2 - DEPLOY A KUBERNETES YAML MANIFEST THAT CREATES A SAMPLE DEPLOYMENT (WEBSITE) AND ILB SERVICE
echo "Deploying the manifest: $samplemanifest to Namespace: $devnamespacelabel"
kubectl apply -f $samplemanifest --namespace=$devnamespacelabel

echo "Sleeping for 60 seconds while the sample app and ILB gets provisioned and private IP setup"
sleep 60

echo "Querying All resources in the Namespace"
kubectl get all --namespace=$devnamespacelabel
#We Query the Service for the private IP generated by the ILB
webappip=$(kubectl get svc $svcname --namespace=$devnamespacelabel -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
echo "Website should be running on IP: $webappip | url= http://$webappip"

#EXAMPLE OF AZURE CLI SCRIPT STEPS TO REMOVE ROLE ASSIGNMENT FOR THE CLUSTER SP
#az role assignment delete --assignee-object-id $aksserviceprincipal --role "$vnetrbacrole" --scope $vnetresourceid


#SCRIPT FOOTER
stoptime=`date +"%Y-%m-%d %T"`
echo "Process Completed: " $stoptime
duration=$SECONDS
echo "$(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed."


